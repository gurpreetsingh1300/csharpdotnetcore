--------------------
-- Scalar Queries --
--------------------

-- Basic expressions

SELECT "Hello"

SELECT "Hello" AS word

SELECT VALUE "Hello"

SELECT "Hello", "World"

SELECT
 "Hello" AS word1,
 "World" AS word2

-- Shaping nested arrays
-- and embedded objects

SELECT
[
  "Hello",
  "World"
]
 AS words

SELECT
{
  "word1": "Hello",
  "word2": "World"
}
 AS words

SELECT
{
  "words1":
    ["Hello", "World"],
  "words2":
    ["How", "Are", "You?"]
}
 AS allWords

-- Arithmetic operators

SELECT
 8 * ((2 + 16) - 2) / 2 AS a,
 8 * ((2 + 16) - 2) / 2.1 AS b

-- Logical operators

SELECT
(
  "hot" = "cold" AND
  "up" = "down" OR
  1 = 1
) AS logical1,
(
  "hot" = "cold" AND (
    "up" = "down" OR
    1 = 1
  )
) AS logical2

-- Comparison, ternary, and
-- ternary coalesce operators

SELECT
(
  2 > 3 ?
    "higher" :
    "lower or equal"
) AS ternary

SELECT
(
 undefined ??
 undefined ??
 "third") AS coalesce1,
(
 undefined ??
 "second" ??
 "third") AS coalesce2,
(
 "first" ??
 undefined ??
 "third") AS coalesce3
     
-- String concatenation
-- operator

SELECT
  "Hello" || " " || "World"
    AS StringConcat

-- Math functions

SELECT
 ROUND(3.4) AS MathRound1,
 ROUND(3.5) AS MathRound2,
 CEILING(3.4) AS MathCeiling1,
 CEILING(3.5) AS MathCeiling2,
 FLOOR(3.4) AS MathFloor1,
 FLOOR(3.5) AS MathFloor2,
 ABS(-5) AS MathAbs1,
 ABS(5) AS MathAbs2,
 SIN(28) AS MathSin,
 COS(28) AS MathCos,
 TAN(28) AS MathTan,
 LOG(16) AS MathLog,
 PI() AS MathPi

-- Type checking

SELECT
 IS_ARRAY(6) AS IsArray1,
 IS_ARRAY([6]) AS IsArray2,
 IS_BOOL(6) AS IsBool1,
 IS_BOOL(false) AS IsBool2,
 IS_NULL(6) AS IsNull1,
 IS_NULL(null) AS IsNull2,
 IS_OBJECT("hello")
  AS  IsObject1,
 IS_OBJECT({"word": "hello"})
  AS IsObject2

-- String

SELECT
 CONCAT("A", "b", "c", "d")
  AS SConcat,
 CONTAINS("Abcdef", "cde")
  AS SContains,
 STARTSWITH("Abcdef", "Ab")
  AS SStartsWith,
 ENDSWITH("Abcdef", "cdef")
  AS SEndsWith,
 INDEX_OF("Abcdef", "de")
  AS SIndexOf1,
 INDEX_OF("Abcdef", "df")
  AS SIndexOf2,
 LEFT("Abcdef", 3) AS SLeft,
 RIGHT("Abcdef", 3) AS SRight,
 SUBSTRING("Abcdef", 2, 3)
  AS SSubstring,
 LENGTH("Abcdef") AS SLength,
 LOWER("Abcdef") AS SLower,
 UPPER("Abcdef") AS SUpper

-- Array

SELECT
 ARRAY_CONCAT(
  ["A", "B"],
  ["1", "2"],
  ["#"])
    AS AConcat,
 ARRAY_CONTAINS(
  ["1A", "1B", "1C"],
  "1B")
    AS AContains,
 ARRAY_LENGTH(
  ["1A", "1B", "1C"])
    AS ALength,
 ARRAY_SLICE(
  ["1A", "1B", "1C", "1D"],
  1,
  2)
    AS ASlice

----------------------
-- Families Collection
----------------------

-- FROM clause

-- Can just use 'c'
-- for collection
SELECT * FROM c

-- Get city and state
SELECT
 c.location.city,
 c.location.state
FROM c

-- Can use collection name
SELECT
 Families.location.city,
 Families.location.state
FROM Families

-- Can "double"-alias
SELECT
 f.location.city,
 f.location.state
FROM Families AS f

-- Reduce source to subset
-- of children (per family)
SELECT *
 FROM c.children
 
-- With reduced source, can't
-- query outside the subset
SELECT *
 FROM c.children
 WHERE c.location.state = 'NY'
  
-- All queryable properties
-- need to be in scope
SELECT c.children
 FROM c
 WHERE c.location.state = 'NY'

-- FROM with IN
-- (flatten documents)

SELECT *
 FROM ch IN c.children

SELECT
  ch.givenName ?? ch.firstName
   AS childName,
  ch.grade,
  ARRAY_LENGTH(ch.pets) ?? 0
   AS numberOfPets,
  ch.pets
FROM
 ch IN c.children

-- FROM with JOIN

-- Duplicate parent-level
-- info for each child
SELECT
 f.id,
 f.location.city,
 f.location.state,
 ch.givenName ?? ch.firstName
  AS childName,
 ARRAY_LENGTH(ch.pets) ?? 0
  AS numberOfPets,
 ch.pets
FROM c AS f
JOIN ch IN f.children

-- Double JOIN to flatten
-- children and pets
SELECT
 f.id,
 ch.givenName ?? ch.firstName
  AS childName,
 p.givenName AS petName,
 p.type
FROM c AS f
JOIN ch IN f.children
JOIN p IN ch.pets

-- Flatten to string array of
-- pet names using VALUE
SELECT p.givenName 
 FROM c AS f
 JOIN ch IN f.children 
 JOIN p IN ch.pets

SELECT VALUE p.givenName 
 FROM c AS f
 JOIN ch IN f.children 
 JOIN p IN ch.pets

-- Projections

-- Construct object with
-- child name and grade
SELECT
{
  "child":
    ch.givenName ??
    ch.firstName,
  "grade":
    ch.grade
 } AS childAndGrade
FROM ch IN c.children

-- ...or as array of objects
-- with child name and grade
SELECT
[
 ch.givenName ?? ch.firstName,
 ch.grade
] AS childAndGrade
FROM ch IN c.children

-- ...or as array of values
-- with child name and grade
SELECT VALUE
[
 ch.givenName ?? ch.firstName,
 ch.grade
]
FROM ch IN c.children

------------------------
-- mystore Collection --
------------------------

-- Get all documents
SELECT * FROM c

-- Get all names and IDs
SELECT c.id, c.name
 FROM c

-- Get all names
SELECT c.name
 FROM c

-- Get all names as a
-- flat string array
SELECT VALUE c.name
 FROM c

-- String concatenation
SELECT VALUE
 c.name || ', ' ||
 c.address.countryRegionName
FROM c

-- Range queries
SELECT VALUE c.name
 FROM c
 WHERE
  c.name >= 'A' AND
  c.name <= 'K'

SELECT VALUE c.name
 FROM c
 WHERE
  c.name BETWEEN 'A' AND 'K'

SELECT VALUE c.name
 FROM c
 WHERE
  c.name BETWEEN 'L' AND 'Z'

-- Sort using ORDER BY
SELECT c.id, c.name
 FROM c
 ORDER BY c.name

SELECT c.id, c.name
 FROM c
 ORDER BY c.name DESC

-- Flatten results
SELECT
 c.id,
 c.name,
 c.address.location.city,
 c.address.countryRegionName
FROM c

-- Get all city and
-- state names
SELECT
 c.address.location.city,
 c.address.location
   .stateProvinceName
 FROM c

-- Simpler by reducing subset
SELECT *
 FROM c.address.location

-- Can't filter on subset
-- without an alias
SELECT *
 FROM c.address.location
 WHERE
  c.address.location
   .stateProvinceName
    = 'Florida'

-- Alias the subset to filter
-- within the subset
SELECT *
 FROM c.address.location AS l
 WHERE
  l.stateProvinceName IN
   ('Florida', 'Illinois')

-- Boolean expression
-- property (on = comparison)
SELECT
 c.name,
 c.address.location.city,
  c.address.location
   .stateProvinceName,
  c.address.location.city =
  c.address.location
   .stateProvinceName
    AS isSameCityState
FROM c

-- Ternary (?) operator

SELECT
 c.name,
 c.address.countryRegionName
  AS region,
  (c.address
    .countryRegionName =
     "United States" ?
	  "USD" : "CAD"
  ) AS currency
 FROM c
 WHERE
  c.address.countryRegionName
   IN (
    "United States",
    "Canada")

-- Nested ternary (?) operator

SELECT
 c.name,
 c.address.countryRegionName
  AS region,
  (c.address
    .countryRegionName =
     "United States" ?
	  "USD" :
   (c.address
     .countryRegionName =
      "Canada" ?
	   "CAD" : "EUR"
   )
  ) AS currency
 FROM c
 WHERE
  c.address.countryRegionName
   IN (
    "United States",
    "Canada",
    "France")

-- Aggregate functions

-- Count for zip code
SELECT COUNT(1) AS Zip14111
FROM c
WHERE
 c.address.postalCode =
  '14111'

-- Can't count across
-- partitions without VALUE
SELECT COUNT(1) AS USCount
FROM c
WHERE
 c.address.countryRegionName =
  'United States'

-- Use VALUE for cross
-- partition aggregates
SELECT VALUE COUNT(1)
FROM c
WHERE
 c.address.countryRegionName =
  'United States'

----------------------
-- Families Collection
----------------------

-- Total families
SELECT VALUE COUNT(c)
FROM c

-- Lowest grade
SELECT VALUE
 MIN(ch.grade)
FROM ch IN c.children

-- Highest grade
SELECT VALUE
 MAX(ch.grade)
FROM ch IN c.children

-- Average grade
SELECT VALUE
 AVG(ch.grade)
FROM ch IN c.children

-- Fewest children
SELECT VALUE
 MIN(ARRAY_LENGTH(c.children))
FROM c

-- Most children
SELECT VALUE
 MAX(ARRAY_LENGTH(c.children))
FROM c

-- Total children
SELECT VALUE
 SUM(ARRAY_LENGTH(c.children))
FROM c

-- Total pets
SELECT VALUE
 SUM(ARRAY_LENGTH(ch.pets))
FROM ch IN c.children

-- Aggregates for NY children
SELECT
 COUNT(ch) AS NyKidsCount,
 MIN(ch.grade) AS NyMinGrade,
 MAX(ch.grade) AS NyMaxGrade,
 SUM(ARRAY_LENGTH(ch.pets))
  AS NyPetsCount
FROM c JOIN ch IN c.children
WHERE c.location.state = "NY"

-- ...double-check
SELECT
 c.id,
 ch.givenName ?? ch.firstName,
 ch.grade,
 ARRAY_LENGTH(ch.pets) AS pets
FROM c JOIN ch IN c.children
WHERE c.location.state = "NY"

-- Aggregates for all children

SELECT
 c.id,
 ch.givenName ?? ch.firstName,
 ch.grade,
 ARRAY_LENGTH(ch.pets) AS pets
FROM c JOIN ch IN c.children

SELECT VALUE COUNT(ch)
FROM c JOIN ch IN c.children

SELECT VALUE MIN(ch.grade)
FROM c JOIN ch IN c.children

SELECT VALUE MAX(ch.grade)
FROM c JOIN ch IN c.children

SELECT VALUE
 SUM(ARRAY_LENGTH(ch.pets))
FROM c JOIN ch IN c.children

-- Spatial queries

SELECT c.id, c.location, c.geo
 FROM c

SELECT
 c.id,
 c.location,
 ST_DISTANCE(c.geo,
  {
   'type': 'Point',
   'coordinates':
     [-73.992, 40.73104]
  }) AS MetersFromNyc
FROM c

SELECT
 c.id,
 c.location,
 ST_DISTANCE(c.geo,
  {
   'type': 'Point',
   'coordinates':
     [-73.992, 40.73104]
  }) / 1000 AS KmFromNyc
FROM c

SELECT
 c.id,
 c.location,
 ST_DISTANCE(c.geo,
  {
   'type': 'Point',
   'coordinates':
     [-73.992, 40.73104]
  }) / 1000 * .62137119
 AS MilesFromNyc
FROM c

SELECT
 c.id,
 c.location
FROM c
WHERE
 ST_DISTANCE(c.geo,
  {
   'type': 'Point',
   'coordinates':
     [-73.992, 40.73104]
  }) / 1000 * .62137119 <= 8

-- Get families in Manhattan
SELECT
 c.id,
 c.location
FROM c
WHERE
 ST_INTERSECTS(c.geo,
  {
   'type': 'Polygon',
   'coordinates': [ [
     [ -74.01326, 40.7003  ],
     [ -73.99884, 40.70875 ],
     [ -73.97893, 40.71129 ],
     [ -73.97121, 40.72697 ],
     [ -73.97387, 40.73477 ],
     [ -73.97142, 40.74401 ],
     [ -73.94205, 40.77606 ],
     [ -73.94414, 40.78217 ],
     [ -73.9396 , 40.78535 ],
     [ -73.93622, 40.79111 ],
     [ -73.92938, 40.79567 ],
     [ -73.92905, 40.80088 ],
     [ -73.93481, 40.80926 ],
     [ -73.934  , 40.81644 ],
     [ -73.93531, 40.83477 ],
     [ -73.92764, 40.84868 ],
     [ -73.92286, 40.85595 ],
     [ -73.91137, 40.86855 ],
     [ -73.91035, 40.87121 ],
     [ -73.91198, 40.87332 ],
     [ -73.91451, 40.87431 ],
     [ -73.92838, 40.86712 ],
     [ -73.9337 , 40.85868 ],
     [ -73.94451, 40.84999 ],
     [ -73.94494, 40.84232 ],
     [ -74.00786, 40.75435 ],
     [ -74.01069, 40.72892 ],
     [ -74.0185 , 40.70381 ],
     [ -74.01326, 40.7003  ]
   ] ]
  }) = true

SELECT
 ST_ISVALID(
  {
   'type': 'Point',
   'coordinates':
     [-122.3295, 47.60357]
  }) AS IsValidSpatial

SELECT
 ST_ISVALID(
  {
   'type': 'Point',
   'coordinates':
     [47.60357, -122.3295]
  }) AS IsValidSpatial

SELECT
 ST_ISVALIDDETAILED(
  {
   'type': 'Point',
   'coordinates':
     [47.60357, -122.3295]
  }) AS IsValidSpatial
